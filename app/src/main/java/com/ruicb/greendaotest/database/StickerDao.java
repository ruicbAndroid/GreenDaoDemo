package com.ruicb.greendaotest.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "STICKER".
*/
public class StickerDao extends AbstractDao<Sticker, Long> {

    public static final String TABLENAME = "STICKER";

    /**
     * Properties of entity Sticker.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Path = new Property(2, String.class, "path", false, "PATH");
        public final static Property NewRow = new Property(3, String.class, "newRow", false, "NEW_ROW");
        public final static Property LocalPath = new Property(4, String.class, "localPath", false, "LOCAL_PATH");
        public final static Property Pwd = new Property(5, String.class, "pwd", false, "PWD");
    }


    public StickerDao(DaoConfig config) {
        super(config);
    }
    
    public StickerDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"STICKER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT NOT NULL ," + // 1: name
                "\"PATH\" TEXT," + // 2: path
                "\"NEW_ROW\" TEXT," + // 3: newRow
                "\"LOCAL_PATH\" TEXT," + // 4: localPath
                "\"PWD\" TEXT);"); // 5: pwd
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"STICKER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Sticker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String newRow = entity.getNewRow();
        if (newRow != null) {
            stmt.bindString(4, newRow);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(5, localPath);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(6, pwd);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Sticker entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getName());
 
        String path = entity.getPath();
        if (path != null) {
            stmt.bindString(3, path);
        }
 
        String newRow = entity.getNewRow();
        if (newRow != null) {
            stmt.bindString(4, newRow);
        }
 
        String localPath = entity.getLocalPath();
        if (localPath != null) {
            stmt.bindString(5, localPath);
        }
 
        String pwd = entity.getPwd();
        if (pwd != null) {
            stmt.bindString(6, pwd);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Sticker readEntity(Cursor cursor, int offset) {
        Sticker entity = new Sticker( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // path
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // newRow
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // localPath
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // pwd
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Sticker entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.getString(offset + 1));
        entity.setPath(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setNewRow(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocalPath(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPwd(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Sticker entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Sticker entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Sticker entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
